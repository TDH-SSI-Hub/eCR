"""
Title: DSTT Project eICR Parser Module
Author: Nathan Williams
Date: 20 July 2022
Purpose: Define a SAX parser for the eICR responsses from Rhapsody, that pulls
necissary data for Quality Assurance(QA). This will then be available for use
in other programs that look at whole folders of eICR responses for example.
"""


import xml.sax
import sys
import pyodbc
import os
import re
import pandas as pd
import numpy as np
import zipfile
import datetime
import time
#Homebrew Functions
sys.path.insert(1, "J:\\SSI\\_Nathan\\python\\")
import usefulFunctions as uf


snowmed_preg_codes = ['10231000132102', '102872000', '102875003', '102876002', '102882004',
                     '102885002', '102886001', '10058006', '102500002', '102879009', '10058006','100801000119107','10217006','10231000132102','102500002','102501003','102502005','102503000','102504006','102505007','102872000','102875003','102876002','102879009','102882004','102885002','102886001','102887005','102955006','1031000119109','10423003','10455003','104851000119103','10573002','106004004','106007006','106008001','106009009','106010004','106111002','10629511000119100','10697004','10741871000119100','10743651000119100','10743831000119100','10743881000119100','10745001','10745231000119100','10749691000119100','10749811000119100','10749871000119100','10750111000119100','10750161000119100','10750411000119100','10750991000119100','10751511000119100','10751581000119100','10751631000119100','10751701000119100','10751771000119100','10752251000119100','10753491000119100','10754331000119100','10755951000119100','10756261000119100','10756301000119100','10759191000119100','10759231000119100','10760221000119100','10760261000119100','10760541000119100','10760581000119100','10760661000119100','10760701000119100','10760741000119100','10760781000119100','10760821000119100','10760861000119100','10760901000119100','10760981000119100','10761021000119100','10761061000119100','10761101000119100','10761141000119100','10761191000119100','10761241000119100','10761341000119100','10761391000119100','10763001','1076861000000100','1079101000000100','1079111000000100','1079121000000100','1079131000000110','10807061000119100','10808861000119100','10812041000119100','10835571000119100','10835781000119100','10835971000119100','10836071000119100','10836111000119100','109562007','109891004','109893001','109894007','109895008','110081000119109','11026009','1105781000000110','1105791000000110','1105801000000110','11082009','1109951000000100','1109971000000100','11109001','111208003','111424000','111431001','111432008','111447004','111453004','111454005','111458008','111459000','112070001','112071002','112075006','1125006','112925006','112926007','112927003','11337002','11373009','11454006','11466000','1147951000000100','1147961000000100','1147971000000110','1148801000000110','1148811000000100','1148821000000100','1148841000000110','1149411000000100','1149421000000110','1167981000000100','11687002','11718971000119100','118180006','118181005','118182003','118185001','118189007','118215003','118216002','11914001','11942004','119901000119109','12062007','12095001','12296009','12349003','12394009','124735008','125586008','127009','127363001','127364007','127365008','127366009','127367000','127368005','127369002','127370001','127371002','127372009','127373004','127374005','12803000','128077009','12867002','129597002','129598007','12983003','130958001','130959009','130960004','13100007','1323351000000100','13384007','133906008','133907004','13404009','1343000','134435003','134781000119106','135881001','13763000','13798002','13842006','13859001','13866000','13943000','14022007','14049007','14094001','14119008','14136000','14418008','1469007','151441000119105','15196006','15230009','1538006','15400003','15406009','15413009','15467003','15504009','15511008','15539009','15592002','156072005','156073000','15633004','15643101000119100','15663008','15809008','15898009','1592005','16038004','161000119101','16101000119107','16111000119105','16271000119108','16320551000119100','163403004','163498004','163499007','163500003','163501004','163502006','163504007','163505008','163506009','163507000','163508005','163509002','163510007','163515002','163516001','16356006','163563004','163564005','163565006','163566007','163567003','163568008','163569000','163570004','163571000','1639007','16437531000119100','164817009','16607004','16714009','16819009','16836261000119100','16836351000119100','16836391000119100','16836431000119100','16836571000119100','16836891000119100','169224002','169225001','169228004','169229007','169230002','169470007','169471006','169488004','16950007','169501005','169508004','169524003','169533001','169539002','169544009','169548007','169550004','169560008','169561007','169562000','169563005','169564004','169565003','169566002','169567006','169568001','169569009','169572002','169573007','169574001','169575000','169576004','169578003','169579006','169582001','169583006','169584000','169585004','169587007','169588002','169589005','169591002','169595006','169597003','169598008','169600002','169602005','169603000','169604006','169605007','169613008','169614002','169615001','169616000','169620001','169628008','169646002','169650009','169651008','169652001','169653006','169657007','169661001','169662008','169667002','169668007','169669004','169670003','169711001','169712008','169713003','169714009','169715005','169716006','169717002','169718007','169719004','169720005','169721009','169722002','169723007','169724001','169725000','169726004','169727008','169762003','169763008','169764002','169765001','169766000','169767009','169768004','169769007','169770008','169771007','169772000','169826009','169827000','169828005','169829002','169830007','169831006','169832004','169833009','169834003','169836001','169952004','169954003','169960003','169961004','17285009','173300003','17333005','17335003','17369002','17380002','17382005','17433009','17532001','17588005','17594002','176827002','176849008','176854004','177128002','177129005','177135005','177136006','177141003','177142005','177143000','177152009','177157003','177158008','177161009','177162002','177164001','177167008','177168003','177170007','177173009','177174003','177175002','177176001','177179008','177180006','177181005','177184002','177185001','177200004','177203002','177204008','177208006','177212000','177217006','177218001','177219009','177220003','177221004','177227000','17787002','178280004','17860005','18114009','18122002','18237006','18260003','18302006','18391007','184339009','18606002','18613002','18625004','18684002','18872002','18894005','19099008','19169002','19228003','19363005','19390001','195005','19564003','19569008','19729005','19773009','198332009','198347000','198617006','198620003','198624007','198626009','198627000','198644001','198645000','198646004','198647008','198648003','198649006','198650006','198655001','198656000','198657009','198659007','198660002','19866007','198661003','198663000','198705001','198706000','198707009','198708004','198709007','198710002','198711003','198718009','198719001','198720007','198721006','198722004','198723009','198724003','198743003','198744009','198745005','198746006','198747002','198748007','198749004','198750004','198755009','198757001','198758006','198759003','198760008','198761007','198762000','198806007','198807003','198808008','198809000','198810005','198811009','198812002','198832001','198861000','198862007','198863002','198874006','198875007','198876008','198878009','198899007','198900002','198903000','198905007','198906008','198910006','198911005','198912003','198917009','198918004','198920001','198922009','198923004','198925006','198927003','198928008','198991006','198992004','198993009','199022003','199023008','199025001','199027009','199028004','199032005','199063009','199064003','199087006','199088001','199093003','199095005','199096006','199099004','199100007','199101006','199102004','199110003','199112006','199117000','199118005','199121007','199122000','199123005','199124004','199127006','199128001','199129009','199139003','199141002','199192005','199194006','199225007','199227004','199244000','199246003','199252002','199254001','199266007','199305006','199306007','199307003','199314001','199317008','199318003','199321001','199322008','199325005','199326006','199329004','199330009','199331008','199344003','199345002','199358001','199359009','199362007','199363002','199375007','199378009','199380003','199381004','199384007','199385008','199397009','199405005','199406006','199409004','199410009','199413006','199414000','199416003','199418002','199419005','199422007','199423002','199425009','199427001','199428006','199466009','199468005','199469002','199470001','199471002','199482005','199483000','199484006','199485007','199577000','199578005','199582007','199583002','199595002','199596001','199597005','199625002','199646006','199647002','199653002','199654008','199677008','199678003','199694005','199695006','199710008','199711007','199718001','199719009','199732004','199733009','199734003','199735002','199737005','199738000','199741009','199745000','199746004','199747008','199749006','199750006','199751005','199752003','199753008','199754002','199755001','199757009','199759007','199760002','199761003','199762005','199763000','199764006','199765007','199767004','199769001','199770000','199774009','199775005','199783004','199784005','199787003','199788008','199806003','199819004','199821009','199824001','199825000','199833004','199834005','199838008','199839000','199847000','199848005','199857004','199858009','199860006','199862003','199863008','199889008','199890004','199916005','199917001','199925004','199926003','199930000','199931001','199934009','199935005','199958008','199960005','199961009','199964001','199965000','199969006','199970007','199972004','199974003','199975002','199977005','199979008','199980006','199990003','199991004','199997000','200025008','200030007','200031006','200038000','200040005','200043007','200046004','200049006','200050006','200052003','200054002','200056000','200057009','200059007','200061003','200063000','200064006','200066008','200068009','200070000','200075005','200077002','200099005','200100002','200102005','200105007','200106008','200108009','200111005','200112003','200114002','200118004','200125006','200130005','200133007','200134001','200138003','200142000','200144004','200146002','200147006','200148001','200149009','200150009','200151008','200154000','200164009','200173001','200181000','200182007','200185009','200187001','200190007','200191006','200195002','200196001','200237000','200238005','200255009','200277008','200280009','200281008','200286003','200288002','200289005','200290001','200291002','200297003','200330000','200331001','200332008','200333003','200337002','200338007','200342005','200343000','200351002','200352009','200444007','200446009','200447000','200448005','200449002','201134009','20216003','20236002','20259008','20272009','20286008','20391007','20483002','206057002','206070006','206112008','206113003','206114009','206115005','206116006','206117002','206118007','206121009','206122002','206123007','206134005','206137003','206138008','206139000','206146009','206148005','206149002','206242003','206244002','20625004','206365006','206538000','20753005','20845005','20932005','21127004','21243004','21280005','21334005','21346009','21360006','21504004','21604008','21623001','21737000','21987001','22046002','22173004','22271007','22281000119101','22288000','223003','2239004','22399000','22514005','225245001','22633006','22753004','22758008','22846003','228471000000102','228531000000103','228551000000105','228691000000101','228701000000101','228711000000104','22879003','228881000000102','228921000000108','22966008','229761000000107','229801000000102','23001005','23128002','23171006','23177005','232671000000100','23332002','23401002','234058009','23431000119106','234380002','23464008','23508005','235888006','23652008','23667007','236883005','236958009','236971007','236973005','236974004','236975003','236976002','236977006','236978001','236979009','236980007','236981006','236982004','236983009','236984003','236985002','236986001','236987005','236988000','236989008','236990004','236991000','236992007','236994008','237000000','237001001','237002008','237003003','237004009','237005005','237006006','237007002','237008007','237009004','237010009','237011008','237012001','237014000','237015004','237021000','237022007','237023002','237024008','23717007','237198001','237201006','237202004','237205002','237206001','237230004','237233002','237234008','237235009','237236005','237237001','237238006','237239003','237240001','237241002','237242009','237243004','237244005','237247003','237249000','237250000','237252008','237253003','237254009','237256006','237257002','237259004','237261008','237270006','237271005','237272003','237273008','237274002','237275001','237276000','237277009','237284001','237285000','237286004','237288003','237292005','237294006','237298009','237300009','237302001','237303006','237304000','237311001','237312008','237313003','237319004','237320005','237321009','237324001','237325000','237327008','237328003','237329006','237336007','237337003','237338008','237343001','237348005','237349002','237350002','237351003','237352005','237357004','237364002','237365001','237366000','23793007','238613007','238820002','23885003','239101008','239102001','239103006','239104000','239105004','240160002','24095001','24146004','241491007','241493005','241494004','24258008','243826008','243827004','24444009','24699006','247421008','248896000','248937008','248985009','248996001','249013004','249014005','249017003','249018008','249020006','249032005','249037004','249064003','249065002','249089009','249090000','249091001','249098007','249099004','249100007','249104003','249105002','249122000','249142009','249144005','249145006','249146007','249147003','249148008','249149000','249150000','249151001','249161008','249162001','249166003','249170006','249172003','249173008','249174002','249175001','249177009','249189006','249195007','249196008','249205008','249206009','249207000','249218000','249219008','249220002','25026004','25032009','25053000','25113000','25192009','25296001','25404008','25519006','25691001','25749005','25825004','25828002','25922000','26010008','26050006','26158002','26224003','26313002','265062002','265639000','265640003','26623000','266784003','26690008','267193004','267194005','267197003','267199000','267257007','267265005','267268007','267269004','267271004','267272006','267273001','267276009','267278005','267335003','267340006','26741000','26743002','26828006','268445003','268475008','268479002','268585006','268809007','268811003','268812005','268813000','268865003','27015006','270498000','27068000','271368004','271369007','271370008','271373005','271403007','271442007','27152008','27169005','271954000','27215002','27388005','273982004','273984003','274117006','274118001','274119009','274121004','274122006','274125008','274127000','274128005','274129002','274130007','274514009','274972007','274973002','275168001','275169009','275306006','275412000','275421004','275425008','275426009','275427000','275429002','275434003','276367008','276445008','276479009','276508000','276509008','276580005','276641008','276642001','276881003','27696007','278056007','278058008','278094007','278095008','278096009','279225001','28030000','280732008','281050002','281052005','281307002','281687006','282020008','284075002','285409006','28542003','285434006','2858002','286996009','28701003','287976008','287977004','288039005','288042004','288045002','288141009','288189000','288190009','288191008','288193006','288194000','288209009','288210004','288261009','288265000','288266004','28860009','289203002','289204008','289205009','289208006','289209003','289210008','289211007','289212000','289213005','289214004','289215003','289216002','289217006','289218001','289219009','289220003','289221004','289222006','289223001','289224007','289226009','289227000','289228005','289229002','289230007','289231006','289232004','289233009','289234003','289235002','289236001','289237005','289238000','289239008','289240005','289241009','289242002','289243007','289244001','289245000','289246004','289247008','289252003','289253008','289254002','289256000','289258004','289259007','289261003','289263000','289264006','289265007','289267004','289269001','289270000','289271001','289272008','289273003','289275005','289276006','289277002','289278007','289279004','289280001','289349009','289350009','289351008','289352001','289353006','289354000','289355004','289356003','289357007','289358002','289572007','289573002','289574008','289575009','289606001','289607005','289608000','289675001','289676000','289677009','289678004','289679007','289680005','289681009','289682002','289683007','289684001','289685000','289686004','289687008','289688003','289689006','289690002','289691003','289692005','289693000','289694006','289699001','289700000','289701001','289702008','289703003','289704009','289705005','289706006','289707002','289708007','289709004','289710009','289711008','289712001','289714000','289715004','289716003','289717007','289718002','289719005','289720004','289721000','289722007','289723002','289724008','289725009','289726005','289727001','289728006','289729003','289730008','289731007','289732000','289733005','289734004','289735003','289736002','289737006','289738001','289739009','289740006','289741005','289742003','289743008','289744002','289745001','289746000','289747009','289748004','289749007','289761004','289762006','289763001','289764007','289765008','289766009','289768005','289769002','289770001','289771002','289827009','289828004','28996007','290653008','291665000','29171003','29397004','29399001','29421008','29583006','29613008','29682007','29851005','29950007','29995000','29997008','300927001','30165006','301801008','302080006','302253005','302254004','302375005','302382009','302383004','302384005','302644007','303063000','30476003','30479005','30653008','306727001','307337003','307338008','307534009','307733001','307734007','307735008','307737000','307738005','307746006','307748007','307749004','307750004','307752007','307813007','308037008','30806007','308135003','308137006','308140006','308187004','30850008','309469004','310248000','31026002','31041000119106','310592002','310594001','310602001','310603006','310604000','31159001','31207002','31208007','313017000','313178001','313179009','313180007','31383003','314204000','31481000','315307003','315308008','31563000','31601007','31805001','31821006','31939001','31998007','320003','3230006','32999002','33046001','33340004','33348006','33370009','33490001','33552005','33561005','33627001','33654003','33807004','34089005','34100008','34262005','34270000','34327003','34367002','34478009','34500003','34530006','34614007','34701001','34801009','34842007','34981006','35347003','35381000119101','35537000','35574001','35608009','35656003','35716006','35746009','35874009','35882009','359937006','359940006','359943008','359946000','35999006','361095003','361096002','36144008','36248000','36297009','362972006','362973001','3634007','363681007','36428009','364587008','36473002','364738009','36497006','366323009','366325002','366327005','366328000','366329008','366330003','366332006','36664002','36697001','367494004','36801000119105','36813001','36854009','37005007','370352001','371091008','371106008','371374003','371375002','371380006','371614003','372043009','372456005','373663005','373896005','373901007','373902000','37762002','37787009','3798002','38010008','38039008','38099005','382341000000101','38250004','38257001','38451000119105','384729004','384730009','38479009','38534008','386235000','386322007','386343008','386639001','386641000','38720006','387692004','387696001','387699008','387700009','387709005','387710000','387711001','38784004','3885002','38905006','38951007','39101000119109','391131000119106','39120007','39121000119100','391896006','391897002','39199000','391997001','391998006','392000009','39208009','39213008','39239006','39246002','39249009','39333005','39406005','394211000119109','394221000119102','3944006','3950001','396544001','397752008','397949005','397952002','398019008','39804004','398262004','398307005','399031001','399363000','400170001','4006006','40219000','4026005','402836009','403528000','40405003','40444006','40500006','40521000119100','405256006','405733001','405736009','40704000','40791000119105','40792007','40801000119106','408783007','408796008','408814002','408815001','408818004','408819007','408823004','408825006','408827003','408828008','408831009','408833007','408840008','408842000','408843005','408883002','41059002','41215002','413338003','413339006','41438001','414880004','415105001','41587001','416055001','416402001','416413003','416669000','417006004','417044008','417121007','417150000','417364008','417570003','41806003','418090003','42102002','42170009','422808006','423445003','423834007','42390009','424037008','424441002','424525001','424619006','42537006','42553009','425551008','425708006','42571002','42599006','426295007','426403007','426840007','42686001','426997005','427013000','427139004','427623005','42783002','428017002','428058009','428164004','428230005','428252001','428508008','428511009','428566005','428567001','42857002','428930004','429187001','429240000','429715006','430063002','430064008','430881000','430933008','431868002','432246004','43293004','43306002','433153009','43651009','43673002','43697006','43715006','43808007','439311009','43970002','43990006','44101005','441619002','441697004','441924001','44216000','442478007','443006','443460007','44398003','444661007','445086005','4451004','445149007','445548006','445866007','445912000','446208007','446353007','44640004','446522006','446810002','446920006','44772007','44782008','44795003','447972007','44814008','44979007','449807005','449808000','449809008','44992005','4504004','450483001','450484007','450640001','450678004','450679007','450798003','451014004','45139008','45307008','45384004','45718005','45757002','45759004','4576001','459166009','459167000','459168005','459169002','459170001','459171002','46022004','46230007','46273003','46311005','46365005','46502006','46894009','46906003','47161002','47200007','472321009','47236005','47267007','472839005','47537002','4787007','480571000119102','48204000','48433002','48485000','48688005','48739004','48775002','48782003','4886009','48888007','48975005','4907004','49177006','49279000','49342001','49364005','49416000','49550006','49561003','49632008','49815007','49964003','50258003','50367001','50557007','50726009','50758004','50770000','50844007','51096002','51154004','51195001','51495008','51519001','51707007','51885006','51920004','51953009','51954003','521000119104','522101000000109','5231000179108','52327008','52342006','5241000179100','52483005','52588004','52660002','52772002','52942000','53024001','53098006','53111003','53183006','53212003','53247006','53443007','53638009','53881005','54044001','54155004','54212005','54213000','54318006','54449002','54529009','54559004','54650005','54812001','54844002','54973000','55052008','55187005','55466006','55472006','55543007','5556001','55581002','55589000','55613002','55639004','55669006','55704005','5577003','55933000','55976003','56160003','56272000','56425003','56451001','56462001','56620000','57271003','57296000','5740008','57411006','57420002','57469000','57576007','57630001','57734001','57759005','57797005','57907009','58123006','58289000','58532003','58699001','58703003','58705005','58881007','58990004','59204004','59363009','5939002','59403008','5945005','59466002','59566000','59795007','5984000','59859005','59919008','60000008','60265009','60328005','60401000119104','60755004','60810003','609133009','609204004','609441001','609442008','609443003','609446006','609447002','609449004','609450004','609451000','609452007','609453002','609454008','609455009','609456005','609457001','609458006','609459003','609460008','609461007','609462000','609463005','609464004','609465003','609466002','609467006','609468001','609469009','609470005','609471009','609472002','609473007','609474001','609475000','609476004','609477008','609478003','609479006','609480009','609482001','609483006','609484000','609485004','609486003','609487007','609489005','609490001','609491002','609492009','609493004','609494005','609496007','609497003','609498008','609499000','609500009','609501008','609502001','609503006','609504000','609505004','609506003','609507007','609508002','609510000','609511001','609512008','609513003','609514009','609515005','609516006','609519004','609525000','61007003','6134000','61353001','61452007','61568004','61586001','61714007','61752008','61810006','61881000','61893009','61951009','62129004','62131008','62333002','6234006','62377009','62410004','62472004','62508004','6251000119101','62531004','62583006','6261000119104','62612003','62657007','62774004','62888008','63110000','63407004','63503002','63596003','63637002','63662002','63750008','6383007','64171002','64181003','64229006','64254006','6473009','64814003','64920003','64954002','65035007','65147003','65243006','65377004','65409004','65539006','65683006','65727000','6594005','66119008','66131005','66231000','66294006','6647006','6678005','66892003','66895001','66958002','67042008','67229002','67465009','67486009','67802002','6802007','68189005','68214002','6825008','68509000','68635007','6891008','6893006','69162008','69217004','69270005','69302000','69338007','69422002','69777007','69802008','698414000','698415004','698497008','698498003','698554000','698555004','698586005','698587001','698632006','698636009','698702007','698708006','698709003','698710008','698711007','698712000','698713005','698716002','698717006','698791008','698795004','699240001','699949009','699950009','699999008','700000006','700038005','700041001','700442004','70068004','70112005','70137000','702452007','702453002','702454008','702736005','702737001','702738006','702739003','702740001','702741002','702742009','702743004','702744005','702985005','70425008','70537007','70651004','707089008','707207004','707254000','70823006','709004006','70964000','710165007','71028008','710911000000102','71096001','71166009','71216006','712653003','712654009','712655005','713187004','713191009','713192002','713202001','713232009','713233004','713234005','713235006','713237003','713238008','713239000','713240003','713241004','713242006','713249002','713386003','713387007','71355009','713575004','713576003','71362000','714812005','715880002','71612002','716379000','71639005','7166002','717794008','717795009','717797001','717809003','717810008','717816002','717817006','717818001','717819009','717820003','717959008','717960003','718475004','71848002','71901000','72014004','72059007','721022000','721177006','72161000119100','722570003','723541004','723665008','72417002','724483001','724484007','724486009','724488005','724489002','724490006','724496000','7245003','72492007','72543004','72544005','72613009','7266006','72846000','72860003','72892002','73161006','73280003','733142005','73341009','733839001','734275002','734276001','735492001','736018001','736020003','736026009','736118004','737318003','737321001','737331008','73837001','73972002','740597009','74369005','74437002','74522004','74952004','74955002','74978008','749781000000109','75013000','75022004','7504005','75094005','75697004','75825001','75928003','75933004','75947000','76012002','76037007','762612009','762613004','762614005','76472002','76771005','76871004','76889003','7707000','77099001','77186001','77206006','77259008','77285007','77376005','77386006','77563000','7768008','77814006','77854008','77913004','7792000','7802000','7809009','7822001','78395001','785341006','785867009','785868004','785869007','785870008','785871007','785872000','7860005','786067000','78697003','78808002','788180009','788290007','788728009','7888004','7910003','79179003','79255005','79290002','79414005','79586000','796731000000105','796741000000101','79748007','79839005','79992004','80002007','80113008','80224003','80228000','80256005','80438008','80487005','8071005','80722003','80818002','80997009','81130000','81328008','813541000000100','81448000','81521003','816148008','81677009','816966004','816967008','816969006','820947007','82118009','82153002','82204006','82338001','82661006','82688001','82897000','83074005','83094001','83121003','83243004','8333008','83916000','83922009','8393005','84007008','84032005','840448004','840625002','840626001','840627005','840628000','840629008','840630003','840631004','840632006','840633001','84132007','84143004','84195007','84235001','84275009','84382006','8445003','84457005','8468007','84693004','85039006','85116003','85331004','85403009','854611000000109','85467007','855021000000107','855031000000109','85542007','85548006','85632001','85652000','858901000000108','85991008','860602007','86081009','861281000000109','861301000000105','861321000000101','86196005','86203003','86356004','863897005','86599005','866229004','866481000000104','8670007','86801005','86803008','86883006','87038002','871005','87178007','87383005','87527008','87605005','87621000','87662006','87814002','87840008','87967003','87968008','88144003','88178009','88201000119101','88362001','88697005','8884000','88887003','88895004','89053004','89346004','893721000000103','89672000','89700002','89849000','89934007','8996006','90009001','90188009','90306000','904002','90438006','90450000','90532005','90645002','90797000','90968009','91162000','9121000119106','91271004','91484005','91957002','921611000000101','9221009','92297008','925561000000100','92684002','9279009','9293002','9297001','931004','9343003','9442009','95606005','95607001','95608006','9686009','9720009','9724000','9780006','9899009']#This is a partial list and will end up being much larger
loinc_preg_codes = ['33065-4', '11449-6', '11884-4', '11885-1', '11886-9', '11887-7', '45371-2',
                   '11778-8', '11779-6', '11780-4', '11636-8', '11637-6', '11638-4', '11639-2', '11640-0', '11612-9', '11613-7',
                       '11614-5'] #These might need revision based on SME input
ICD_preg_codes = ['Z33','Z33.1','Z33.2','Z33.3',
                  'Z34','Z34.0','Z34.00','Z34.01','Z34.02','Z34.03','Z34.8','Z34.80','Z34.81','Z34.82','Z34.83','Z34.9','Z34.90','Z34.91','Z34.92','Z34.93',
                  'Z36','Z36.0','Z36.1','Z36.2','Z36.3','Z36.4','Z36.5','Z36.8','Z36.81','Z36.82','Z36.83','Z36.84','Z36.85','Z36.86','Z36.87','Z36.88','Z36.89','Z36.8A','Z36.9',
                  'Z3A','Z3A.0','Z3A.00','Z3A.01','Z3A.08','Z3A.09','Z3A.1','Z3A.10','Z3A.11','Z3A.12','Z3A.13','Z3A.14','Z3A.15','Z3A.16','Z3A.17','Z3A.18','Z3A.19','Z3A.2','Z3A.20',
                  'Z3A.21','Z3A.22','Z3A.23','Z3A.24','Z3A.25','Z3A.26','Z3A.27','Z3A.28','Z3A.29','Z3A.3','Z3A.30','Z3A.31','Z3A.32','Z3A.33','Z3A.34','Z3A.35','Z3A.36','Z3A.37','Z3A.38','Z3A.39',
                  'Z3A.4','Z3A.40','Z3A.41','Z3A.42','Z3A.49', 'Z37','Z37.0','Z37.1','Z37.2','Z37.3','Z37.4','Z37.5','Z37.50','Z37.51','Z37.52','Z37.53','Z37.54','Z37.59','Z37.6','Z37.60','Z37.61','Z37.62','Z37.63','Z37.69','Z37.7','Z37.9',
                      'Z39','Z39.0','Z39.1','Z39.2']
daysToSearch = 2

myDate1 = str(datetime.date.today()- datetime.timedelta(days=1))
myDate2 = str((datetime.date.today() - datetime.timedelta(days=1)).strftime("%m/%d/%Y"))
myDate3 = str(datetime.date.today().strftime("%m/%d/%Y"))

print(myDate1, myDate2, myDate3)

class Address():
    def __init__(self
                 ,addressID = "-1" # This will be an id that I assign to help facilitate address storage, may not be the best way to handle the addresses
                 ,street = "-1"
                 ,city = "-1"
                 ,state = "-1"
                 ,zipCode = "-1"
                 ,county = "-1"
                 ,country = "-1"
                 ,addressType = "-1"
                 ):
        """
            The Address class is a container for all address related data

            :param addressID: The id assigned by the access database for identifying addresses
            :param street: A string representing the street portion of an address
            :param city: A string repesenting the city of the address
            :param state: A string representing the state of the address
            :param zipCode: A string representing the postal code of the address
            :param county: A string representing the county of the address
            :param country: A string representing the country of the address
        """        
        if addressID != None:
            self.addressID = addressID
        else:
            self.addressId = None
        if street !=  None:
            self.street = street
        else:
            self.street = None
        if city != None:
            self.city = city
        else:
            self.city = None
        if state != None:
            self.state = state
        else:
            self.state = None
        if zipCode != None:
            self.zipCode = zipCode
        else:
            self.zipCode = None
        if county != None:
            self.county = county
        else:
            self.county = None
        if country != None:
            self.country = country
        else:
            self.country = None
        if addressType != None:
            self.addressType = addressType
        else:
            self.addressType = None

class Provider():
    def __init__(self
                 ,docID = "-1"
                 ,orgName = "-1"
                 ,address = Address()
                 ,orgID = "-1" # This might be some kind of coded value, such as a root and extension that I may need to rethink, It appears that there are single values that will work for this
                 # Epic systems can use the setID-> root and Cerner should be able to use Custodian id -> root
                 ,systemID = "-1" # This is the unique id for a system
                 ,phoneNumber = "-1" # This might need to be a telecom class that has use and value, but currently I'm looking at just a phone number.
                 ):
        """
            The Provider class represents a provider organization, usually a facility, but possibly a system as well

            :param docID: A unique ID specific to the eICR
            :param orgName: A string representing the organization's name
            :param address: An object of the Address class representing the address of the organization.
            :param orgID: A string representing the unique ID for an organization
            :param systemID: A string representing the healthcare system that the organization belongs to.
            :param phoneNumber: A string representing the main phone number for the organization
        """
        if docID != None:
            self.docID = docID
        else:
            self.docID = None
        if orgName != None:
            self.orgName = orgName
        else:
            self.orgName = None
        if address != None:
            self.address = address
        else:
            self.address = None
        if orgID != None:
            self.orgID = orgID
        else:
            self.orgID = None
        if phoneNumber != None:
            self.phoneNumber = phoneNumber
        else:
            self.phoneNumber = None
        if systemID != None:
            self.systemID = systemID
        else:
            self.systemID = None

class CodedValue():
    def __init__(self
                 ,code = "-1"
                 ,codeSystem = "-1"
                 ,codeSystemName = "-1"
                 ,displayName = "-1"
                 ,valid = "-1"
                 ):
        """
            The CodedValue class represents a value within a coded system

            :param code: A string representing the code
            :param codeSystem: A string identifying the code system
            :param codeSystemName: A string representing the human readable code system's name
            :param displayName: A string representing the value that the code takes
            :param valid: A binary identifier that identifies if the code is valid against the codeSystem documentation.
        """
        if code != None:
            self.code = code
        else:
            self.code = None
        if codeSystem != None:
            self.codeSystem = codeSystem
        else:
            self.codeSystem = None
        if codeSystemName != None:
            self.codeSystemName = codeSystemName
        else:
            self.codeSystemName = None
        if displayName != None:
            self.displayName = displayName
        else:
            self.displayName = None
        if valid != None:
            self.valid = valid
        else:
            self.valid = None

class Patient():
    def __init__(self
                 ,docID = "-1"
                 ,firstNames = []
                 ,lastNames = []
                 ,primaryFirstName = "-1"
                 ,primaryLastName = "-1"
                 ,address = Address()
                 ,phoneNumbers = [] # This might need to be a telecom class that has use and value, but currently I'm looking at just a phone number.
                 ,primaryPhoneNumber = "-1"
                 ,dob = "-1"
                 ,race = CodedValue()
                 ,ethnicity = CodedValue()
                 ,sex = CodedValue()
                 ,pregnancyStatus = "-1" # This might need to be a coded value or some other class call, however I haven't seen record with pregnancy information in it yet.
                 ,travelHistory = "-1" # This might also need to be a class call to a TravelHistory class, but I don't know since I haven't seen an eICR with travel history yet.
                 ,deceased = "-1" # I need to double check to make sure that this can just be a string value, it may be a coded value and need to be an instance of CodedValue
                 ,mrn = "-1"
                 ,maritalStatus = CodedValue()
                 ):
        """
            The Patient class represents a patient from an eICR.

            :param docID: A unique ID specific to this eICR
            :param firstNames: A list representing the first/given names of the patient from the eICR with docID
            :param lastNames: A list representing the last/family names of the patient from the eICR with docID
            :param primaryFirstName: A single first/given name that represents the primary first/given name of the patient
            :param primaryLastName: A single last/family name that represents the primary last/given name of the patient
            :param address: An instance of Address that represents the home/mailing address of the patient
            :param phoneNumber: A phone number for the patient. *This may need to be updated to be an instance of a telecom class that represents a use and value for telecom*
            :param dob: A number representing the birth date of the patient
            :param race: An instance of CodedValue that represents the patient's race
            :param ethnicity: An instance of CodedValue that represents the patient's ethnicity
            :param sex: An instance of CodedValue that represents the patients sex
            :param pregancyStatus: An indicator of pregnancy status, *May take the form of an instance of a class*
            :param travelHistory: An indicator of travel history, ***I have no idea what this will look like yet. Could be a binary, could be an instance of a class***
            :param deceased: A binary indicator of deceased status for the patient.
        """
        if docID != None:
            self.docID = docID
        else:
            self.docID = None
        if firstNames != []:
            self.firstNames = firstNames
        else:
            self.firstNames = []
        if lastNames != []:
            self.lastNames = lastNames
        else:
            self.lastNames = []
        if primaryFirstName != None:
            self.primaryFirstName = primaryFirstName
        else:
            self.primaryFirstName = None
        if primaryLastName != None:
            self.primaryLastName = primaryLastName
        else:
            self.primaryLastName = None
        if address != None:
            self.address = address
        else:
            self.address = None
        if phoneNumbers != []:
            self.phoneNumbers = phoneNumbers
        else:
            self.phoneNumbers = []
        if dob != None:
            self.dob = dob
        else:
            self.dob = None
        if race != None:
            self.race = race
        else:
            self.race = None
        if ethnicity != None:
            self.ethnicity = ethnicity
        else:
            self.ethnicity = None
        if sex != None:
            self.sex = sex
        else:
            self.sex = None
        if pregnancyStatus != None:
            self.pregnancyStatus = pregnancyStatus
        else:
            self.pregnancyStatus = None
        if travelHistory != None:
            self.travelHistory = travelHistory
        else:
            self.travelHistory = None
        if deceased != None:
            self.deceased = deceased
        else:
            self.deceased = None
        if mrn != None:
            self.mrn = mrn 
        else:
            self.mrn = None
        if maritalStatus != None:
            self.maritalStatus = maritalStatus
        else:
            self.maritalStatus = None

class Document():
    def __init__(self
                 ,docID = "-1"
                 ,origDocID = "-1"
                 ,patient = Patient()
                 ,provider = Provider()
                 ,healthCareFacility = Provider()
                 ,serviceProvider = Provider()
                 ,triggerCondition = "-1" # This is currently a place holder, because I'm not sure what the triggerCondition will look like, it might need to be a new class
                 ,vcn = "-1"
                 ,address = Address()
                 ,hpi = False
                 ,dischargeDisposition = "-1"
                 ,eE = "-1"
                 ,eECode = CodedValue()
                 ,eventTime = "-1"
                 ,encounterTime = "-1"
                 ,miscNotes = '-1'
                 ):
        """
            The Document class represents an eICR document. It contains an ID, patient, provider, trigger condition and version control number.

            :param docID: A unique id specific to this eICR
            :param patient: An instance Patient representing the patient of this encounter
            :param provider: An instance of Provider representing the provider of this encounter
            :param triggerCondition: A reference to the condition that triggered an RR from this eICR. I'm not sure what this looks like yet and may end up being an instance of a class
            :param versionControlNum: A representation of the version control number given in the eICR.
        """
        self.docID = docID
        self.origDocID = origDocID
        self.patient = patient
        self.provider = provider
        self.healthCareFacility = healthCareFacility
        self.serviceProvider = serviceProvider
        self.triggerCondition = triggerCondition
        self.vcn = vcn # Version Control Number
        self.address = address
        self.hpi = hpi
        self.dischargeDisposition = dischargeDisposition
        self.eE = eE
        self.eECode = eECode
        self.eventTime = eventTime
        self.encounterTime = encounterTime
        self.miscNotes = miscNotes
        
class EICRHandler(xml.sax.ContentHandler):
    def __init__(self, output_cursor = None, location = None, date_added = None):
        self.parentTags = []
        self.document = Document()
        self.cern = False       
        self.output_cursor = output_cursor.cursor()
        self.location = location
        self.patientUID = "-1"
        self.pAddressUID = "-1"
        self.oAddressUID = "-1"
        self.hcfAddressUID = "-1"
        self.spoAddressUID = "-1"
        self.hcfID = "-1"
        self.spoID = "-1"
        self.provID = "-1"
        self.date_added = date_added
        self.addresses = []
        self.HPISection = False
        self.miscNotes = False
        self.matchingDocs = 0
        
        
    def startElement(self, tag, attributes):
        self.currentData = tag
        self.parentTags.append(tag)
        self.cern = False
        #print(self.parentTags)
        #print(self.currentData)

        if self.document.eventTime == '-1' and self.currentData == 'effectiveTime' and self.parentTags[-2] == 'ClinicalDocument' and 'value' in attributes.getNames():
            fullTime = attributes['value']
            date = fullTime[:8]
            year = date[:4]
            month = date[4:6]
            day = date[6:]
            self.document.eventTime = datetime.datetime.strptime('-'.join([year,month,day]), '%Y-%m-%d')

        if self.document.encounterTime == '-1' and self.currentData == 'low' and 'value' in attributes.getNames() and self.parentTags[-2] == 'effectiveTime' and self.parentTags[-3] == 'encompassingEncounter':
            fullTime = attributes['value']
            date = fullTime[:8]
            year = date[:4]
            month = date[4:6]
            day = date[6:]
            self.document.encounterTime = datetime.datetime.strptime('-'.join([year,month,day]), '%Y-%m-%d')
        
        if self.currentData == 'ClinicalDocument' and 'xsi:schemaLocation' in attributes.getNames():
            self.cern = True
        
        if len(self.parentTags)>1:
            # Find the id tag within the representedCustodianOrganization Tag

            if self.parentTags[-2] == 'representedCustodianOrganization' and self.currentData == 'id':
                if 'root' in attributes.getNames() and 'extension' in attributes.getNames():
                    self.document.provider.systemID, self.document.provider.orgID = attributes['extension'], attributes['root']
                elif 'root' in attributes.getNames() and 'extension' not in attributes.getNames():

                    self.document.provider.systemID, self.document.provider.orgID = "-1", attributes['root']
                elif 'root' not in attributes.getNames() and 'extension' in attributes.getNames():

                    self.document.provider.systemID, self.document.provider.orgID = "-1", attributes['extension']
                else:

                    self.document.provider.systemID, self.document.provider.orgID = "-1", "-1"

            if self.parentTags[-2] == 'healthCareFacility' and self.currentData == 'id':
                if 'root' in attributes.getNames() and 'extension' in attributes.getNames():
                    self.document.healthCareFacility.systemID, self.document.healthCareFacility.orgID = attributes['extension'], attributes['root']

                elif 'root' in attributes.getNames() and 'extension' not in attributes.getNames():

                    self.document.healthCareFacility.systemID, self.document.healthCareFacility.orgID = "-1", attributes['root']
                elif 'root' not in attributes.getNames() and 'extension' in attributes.getNames():

                    self.document.healthCareFacility.systemID, self.document.healthCareFacility.orgID = "-1", attributes['extension']
                else:

                    self.document.healthCareFacility.systemID, self.document.healthCareFacility.orgID = "-1", "-1"

            if self.parentTags[-2] == 'serviceProviderOrganization' and self.currentData == 'id':
                if 'root' in attributes.getNames() and 'extension' in attributes.getNames():
                    self.document.serviceProvider.systemID, self.document.serviceProvider.orgID = attributes['extension'], attributes['root']
                elif 'root' in attributes.getNames() and 'extension' not in attributes.getNames():

                    self.document.serviceProvider.systemID, self.document.serviceProvider.orgID = "-1", attributes['root']
                elif 'root' not in attributes.getNames() and 'extension' in attributes.getNames():

                    self.document.serviceProvider.systemID, self.document.serviceProvider.orgID = "-1", attributes['extension']
                else:

                    self.document.serviceProvider.systemID, self.document.serviceProvider.orgID = "-1", "-1"

            if self.currentData == 'telecom' and self.parentTags[-2] == 'representedCustodianOrganization':
                if 'value' in attributes.getNames() and 'use' in attributes.getNames():
                    if attributes['use'] in ['WP'] and attributes['value'] != None:
                        self.document.provider.phoneNumber = attributes['value']
                    else:
                        self.document.provider.phoneNumber = -1

            #This MRN section might be problematic
            if self.parentTags[-2] == "patientRole" and self.currentData == "id" and 'root' in attributes.getNames():
                if attributes["extension"] == None:
                    self.document.patient.mrn = "-1"
                elif attributes.getNames() == 'assigningAuthorityName' and attributes['assigningAuthorityName'] == 'NBS':
                    pass
                else:
                    self.document.patient.mrn = attributes["extension"]

            if self.parentTags[-2] == 'ClinicalDocument' and self.currentData == "versionNumber":
                if 'value' in attributes.getNames():
                    self.document.vcn = attributes['value']
                else:
                    self.document.vcn = "-1"


            # Finds if they were pregnant or not.
            """
            This section probably needs some more work to make sure that we are not missing non-pregnant codes or other possible pregnancy codes

            """
            if self.parentTags[-2] == 'observation' and self.currentData == 'value' and 'code' in attributes.getNames():
                if attributes['code'] in snowmed_preg_codes or attributes['code'] in loinc_preg_codes or attributes['code'] in ICD_preg_codes:
                    self.document.patient.pregnancyStatus = 'pregnant'
                else:
                    self.document.patient.pregnancyStatus = '-1'

            #Finds travel history
            """
            This section probably needs some more work to make sure that we are not missing non-travel codes or other travel codes
            """
            if self.parentTags[-2] == 'act' and self.currentData == 'code' and 'code' in attributes.getNames():
                if attributes['code'] == '4208001':
                    self.document.patient.travelHistory == 'travel'

                else:
                    self.document.patient.travelHistory == 'no travel'

            if self.parentTags[-2] == 'observation' and self.currentData == 'templateId' and 'root' in attributes.getNames():
                if attributes['root'] == '1.3.6.1.4.1.19376.1.5.3.1.4.13':
                    self.pregCount.append(1)
                    self.orgs.append(self.document.serviceProvider.orgName)           
                
            # Checking and handling differences between CERNER and EPIC        
            if self.cern == False:

                if self.parentTags[-2] == 'ClinicalDocument' and self.currentData == 'id' and 'assigningAuthorityName' in attributes.getNames():
                    self.document.origDocID = attributes['root']

                elif self.parentTags[-2] == 'ClinicalDocument' and self.currentData == 'id' and 'assigningAuthorityName' not in attributes.getNames():
                    if self.document.origDocID == "-1":
                        self.document.origDocID = attributes['root']


                    else:
                        self.document.docID = attributes['root']


                    
            elif self.cern == True:

                if self.parentTags[-2] == 'ClinicalDocument' and self.currentData == 'id' and 'a' not in attributes['root'] and 'b' not in attributes['root'] and 'c' not in attributes['root'] and 'd' not in attributes['root'] and 'e' not in attributes['root'] and 'f' not in attributes['root']:
                    self.document.docID = attributes['root']

                else:
                    self.document.origDocID = attributes['root']

                    
            if len(self.parentTags)>3 and self.parentTags[-3] == "patient":
                if self.currentData == "languageCode":
                    if 'code' in attributes.getNames():
                        self.document.patient.language = attributes['code']
                    elif 'nullFlavor' in attributes.getNames():
                        self.document.patient.language = attributes['nullFlavor']
                    else:
                        self.document.patient.language = None
            # This grabs birth date
            if self.currentData == "birthTime" and "value" in attributes.getNames():
                self.document.patient.dob = attributes["value"]

            # This grabs marital status
            if self.currentData == 'maritalStatusCode':
                if 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.patient.maritalStatus.code,
                    self.document.patient.maritalStatus.codeSystem, 
                    self.document.patient.maritalStatus.codeSystemName,
                    self.document.patient.maritalStatus.displayName) = (attributes['code'], attributes['codeSystem'], attributes['codeSystemName'], attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames():
                    (self.document.patient.maritalStatus.code,
                    self.document.patient.maritalStatus.codeSystem, 
                    self.document.patient.maritalStatus.codeSystemName,
                    self.document.patient.maritalStatus.displayName) = (attributes['code'], attributes['codeSystem'], None, None)
                elif 'code' in attributes.getNames():
                    (self.document.patient.maritalStatus.code,
                    self.document.patient.maritalStatus.codeSystem, 
                    self.document.patient.maritalStatus.codeSystemName,
                    self.document.patient.maritalStatus.displayName) = (attributes['code'], None, None, None)
                else:
                    (self.document.patient.maritalStatus.code,
                    self.document.patient.maritalStatus.codeSystem, 
                    self.document.patient.maritalStatus.codeSystemName,
                    self.document.patient.maritalStatus.displayName) = ("-1", None, None, None)

            if self.parentTags[-2] == "encompassingEncounter" and self.currentData == "code" and self.document.eECode.code == "-1":

                if 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (attributes['code'], attributes['codeSystem'], attributes['codeSystemName'], attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames():
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (attributes['code'], attributes['codeSystem'], attribtues['codeSystemName'], None)
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (attributes['code'], attributes['codeSystem'], None, attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames():
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (attributes['code'], attributes['codeSystem'], None, None)
                elif 'code' in attributes.getNames():
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (attributes['code'], None, None, None)
                else:
                    (self.document.eECode.code,
                     self.document.eECode.codeSystem,
                     self.document.eECode.codeSystemName,
                     self.document.eECode.displayName) = (None, None, None, None)

                
            # This grabs gender
            if self.currentData == 'administrativeGenderCode':
                if 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.patient.sex.code,
                    self.document.patient.sex.codeSystem, 
                    self.document.patient.sex.codeSystemName,
                    self.document.patient.sex.displayName) = (attributes['code'], attributes['codeSystem'], attributes['codeSystemName'], attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames():
                    (self.document.patient.sex.code,
                    self.document.patient.sex.codeSystem, 
                    self.document.patient.sex.codeSystemName,
                    self.document.patient.sex.displayName) = (attributes['code'], attributes['codeSystem'], None, None)
                elif 'code' in attributes.getNames():
                    (self.document.patient.sex.code,
                    self.document.patient.sex.codeSystem, 
                    self.document.patient.sex.codeSystemName,
                    self.document.patient.sex.displayName) = (attributes['code'], None, None, None)
                else:
                    (self.document.patient.sex.code,
                    self.document.patient.sex.codeSystem, 
                    self.document.patient.sex.codeSystemName,
                    self.document.patient.sex.displayName) = (None, None, None, None)
                    
            # This grabs race
            if self.currentData == 'raceCode':
                if 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.patient.race.code,
                    self.document.patient.race.codeSystem, 
                    self.document.patient.race.codeSystemName,
                    self.document.patient.race.displayName) = (attributes['code'], attributes['codeSystem'], attributes['codeSystemName'], attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames():
                    (self.document.patient.race.code,
                    self.document.patient.race.codeSystem, 
                    self.document.patient.race.codeSystemName,
                    self.document.patient.race.displayName) = (attributes['code'], attributes['codeSystem'], None, None)
                elif 'code' in attributes.getNames():
                    (self.document.patient.race.code,
                    self.document.patient.race.codeSystem, 
                    self.document.patient.race.codeSystemName,
                    self.document.patient.race.displayName) = (attributes['code'], None, None, None)
                else:
                    (self.document.patient.race.code,
                    self.document.patient.race.codeSystem, 
                    self.document.patient.race.codeSystemName,
                    self.document.patient.race.displayName) = ("-1", None, None, None)

            # This grabs ethnicity
            if self.currentData == 'ethnicGroupCode':
                if 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():
                    (self.document.patient.ethnicity.code,
                    self.document.patient.ethnicity.codeSystem, 
                    self.document.patient.ethnicity.codeSystemName,
                    self.document.patient.ethnicity.displayName) = (attributes['code'], attributes['codeSystem'], attributes['codeSystemName'], attributes['displayName'])
                elif 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames():
                    (self.document.patient.ethnicity.code,
                    self.document.patient.ethnicity.codeSystem, 
                    self.document.patient.ethnicity.codeSystemName,
                    self.document.patient.ethnicity.displayName) = (attributes['code'], attributes['codeSystem'], None, None)
                elif 'code' in attributes.getNames():
                    (self.document.patient.ethnicity.code,
                    self.document.patient.ethnicity.codeSystem, 
                    self.document.patient.ethnicity.codeSystemName,
                    self.document.patient.ethnicity.displayName) = (attributes['code'], None, None, None)
                else:
                    (self.document.patient.ethnicity.code,
                    self.document.patient.ethnicity.codeSystem, 
                    self.document.patient.ethnicity.codeSystemName,
                    self.document.patient.ethnicity.displayName) = ("-1", None, None, None)

            # Get any telecom information for the patient
            if self.parentTags[-2] == "patientRole" and self.currentData == "telecom":
                if 'use' in attributes.getNames() and 'value' in attributes.getNames():
                    if attributes['use'] in ['MC', 'HP'] and attributes['value'] != None:
                        self.document.patient.phoneNumbers.append(attributes['value'])

            if self.parentTags[-2] == "patient" and self.currentData == "sdtc:deceasedInd":
                if 'value' not in attributes.getNames():
                    self.document.patient.deceased = "-1"
                else:
                    self.document.patient.deceased = attributes['value']

            if self.parentTags[-2] == 'addr' and self.parentTags[-3] == 'patientRole':

                if self.currentData == "streetAddressLine" and 'nullFlavor' in attributes.getNames():
                    self.document.address.street = '-2'
                elif self.currentData == "city" and 'nullFlavor' in attributes.getNames():
                    self.document.address.city = '-2'
                elif self.currentData == "state" and 'nullFlavor' in attributes.getNames():
                    self.document.address.state = '-2'
                elif self.currentData == "postalCode" and 'nullFlavor' in attributes.getNames():
                    self.document.address.zipCode = '-2'
                elif self.currentData == 'county' and 'nullFlavor' in attributes.getNames():
                    self.document.address.county = '-2'
                elif self.currentData == 'country' and 'nullFlavor' in attributes.getNames():
                    self.document.address.country = '-2'

            if self.currentData == 'code' and 'code' in attributes.getNames() : #Trying this to see if it fixes the HPI missing thing
                if attributes['code'] == '10164-2':
                    self.document.hpi = 'Present'
                    self.HPISection = True

            if len(self.parentTags)>4 and self.parentTags[-4] == 'component' and self.currentData == 'content' and 'ID' in attributes.getNames():
                if self.HPISection:
                    if self.miscNotes:
                        if attributes['ID'][0:3] == 'nof' and self.document.hpi != 'Present':
                            self.document.miscNotes = 'Missing'


            if len(self.parentTags)>6 and self.parentTags[-6] == 'component' and self.currentData == 'content' and 'ID' in attributes.getNames():
                if self.HPISection:
                    if self.miscNotes:
                        if attributes['ID'][0:4] == 'Note':
                            self.document.miscNotes = 'Present'

            if self.currentData == 'dischargeDispositionCode' and 'code' in attributes.getNames():
                self.document.dischargeDisposition = attributes['code']
 
                        
                    

    def endElement(self, tag):
        self.currentData = tag

        if len(self.parentTags)>2 and self.parentTags[-2]=="patient" and self.currentData == "name":
            if len(self.document.patient.firstNames)>0:
                self.document.patient.primaryFirstName = self.document.patient.firstNames[0]
            else:
                self.document.patient.primaryFirstName = None
            if len(self.document.patient.lastNames)>0:
                self.document.patient.primaryLastName = self.document.patient.lastNames[0]
            else:
                self.document.patient.primaryLastName = None

        if len(self.parentTags)>2 and self.parentTags[-2] == "patientRole" and self.currentData == "telecom":
            if len(self.document.patient.phoneNumbers)>0:
                self.document.patient.primaryPhoneNumber = self.document.patient.phoneNumbers[0]
            else:
                self.document.patient.primaryPhoneNumber = "-1"

        if self.currentData == 'encompassingEncounter':

            self.output_cursor.execute("SELECT * \
                                        FROM eICR_encompassing_encounter_codes\
                                        WHERE code = ?", (self.document.eECode.code))
            rows = self.output_cursor.fetchall()

            if len(rows) == 0 and self.document.eECode.code != None:
                
                self.output_cursor.execute("INSERT INTO eICR_encompassing_encounter_codes\
                                                (code, code_system, code_system_name, display_name) VALUES (?, ?, ?, ?)", (self.document.eECode.code,
                                                                                                                           self.document.eECode.codeSystem,
                                                                                                                           self.document.eECode.codeSystemName,
                                                                                                                           self.document.eECode.displayName))
                self.output_cursor.commit()


                    
        if self.currentData == 'ClinicalDocument':

            if self.output_cursor != None:
                if self.document.docID is not None:

                    self.output_cursor.execute("SELECT * from eICR_patients2 WHERE OID = ?\
                                                and mrn = ?\
                                                and given_name = ?\
                                                and family_name = ?\
                                                and pat_language = ?\
                                                and dob = ?\
                                                and marital_status = ?\
                                                and gender = ?\
                                                and race = ?\
                                                and ethnicity = ?\
                                                and telecom = ?\
                                                and deceased = ?\
                                                and pregnancy_status = ?\
                                                and travel_history = ?", (self.document.docID,
                                                                 self.document.patient.mrn,
                                                                 self.document.patient.primaryFirstName,
                                                                 self.document.patient.primaryLastName,
                                                                 self.document.patient.language,
                                                                 self.document.patient.dob,
                                                                 self.document.patient.maritalStatus.code,
                                                                 self.document.patient.sex.code,
                                                                 self.document.patient.race.code,
                                                                 self.document.patient.ethnicity.code,
                                                                 self.document.patient.primaryPhoneNumber,
                                                                 self.document.patient.deceased,
                                                                 self.document.patient.pregnancyStatus,
                                                                 self.document.patient.travelHistory))
                    self.patientExists = False
                    rows = self.output_cursor.fetchall()
                    for row in rows:
                        self.patientUID = row[0]

                    if len(rows)==0:

                        if self.document.docID == "-1":
                            
                            self.document.docID = self.document.origDocID

                        if len(self.addresses)>0: # This feels like a bandaid solution I need to figure out what is the cause of this problem. Why am I not seeing an address at all?
                            self.output_cursor.execute("INSERT INTO eICR_patients2\
                                (OID, mrn, given_name, family_name, pat_language, dob, marital_status, gender, race, ethnicity, telecom, deceased, pregnancy_status, travel_history, address, vcn, provider)\
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                (self.document.docID,
                                 self.document.patient.mrn,
                                 self.document.patient.primaryFirstName,
                                 self.document.patient.primaryLastName,
                                 self.document.patient.language,
                                 self.document.patient.dob,
                                 self.document.patient.maritalStatus.code,
                                 self.document.patient.sex.code,
                                 self.document.patient.race.code,
                                 self.document.patient.ethnicity.code,
                                 self.document.patient.primaryPhoneNumber,
                                 self.document.patient.deceased,
                                 self.document.patient.pregnancyStatus,
                                 self.document.patient.travelHistory,
                                 self.addresses[0],
                                 self.document.vcn,
                                 self.provID))
                            self.output_cursor.commit()

                        else:
                            self.output_cursor.execute("INSERT INTO eICR_patients2\
                                (OID, mrn, given_name, family_name, pat_language, dob, marital_status, gender, race, ethnicity, telecom, deceased, pregnancy_status, travel_history, address, vcn, provider)\
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                (self.document.docID,
                                 self.document.patient.mrn,
                                 self.document.patient.primaryFirstName,
                                 self.document.patient.primaryLastName,
                                 self.document.patient.language,
                                 self.document.patient.dob,
                                 self.document.patient.maritalStatus.code,
                                 self.document.patient.sex.code,
                                 self.document.patient.race.code,
                                 self.document.patient.ethnicity.code,
                                 self.document.patient.primaryPhoneNumber,
                                 self.document.patient.deceased,
                                 self.document.patient.pregnancyStatus,
                                 self.document.patient.travelHistory,
                                 "-1",
                                 self.document.vcn,
                                 self.provID))
                            self.output_cursor.commit()


                    self.output_cursor.execute("SELECT * from eICR_patients2 WHERE OID = ?\
                                                and mrn = ?\
                                                and given_name = ?\
                                                and family_name = ?\
                                                and pat_language = ?\
                                                and dob = ?\
                                                and marital_status = ?\
                                                and gender = ?\
                                                and race = ?\
                                                and ethnicity = ?\
                                                and telecom = ?\
                                                and deceased = ?\
                                                and pregnancy_status = ?\
                                                and travel_history = ?", (self.document.docID,
                                                                 self.document.patient.mrn,
                                                                 self.document.patient.primaryFirstName,
                                                                 self.document.patient.primaryLastName,
                                                                 self.document.patient.language,
                                                                 self.document.patient.dob,
                                                                 self.document.patient.maritalStatus.code,
                                                                 self.document.patient.sex.code,
                                                                 self.document.patient.race.code,
                                                                 self.document.patient.ethnicity.code,
                                                                 self.document.patient.primaryPhoneNumber,
                                                                 self.document.patient.deceased,
                                                                 self.document.patient.pregnancyStatus,
                                                                 self.document.patient.travelHistory))
                    self.patientExists = False
                    rows = self.output_cursor.fetchall()

                    for row in rows:
                        self.patientUID = row[0]

                    self.output_cursor.execute("SELECT OID, original_OID,\
                                                versionControlNum,\
                                                location FROM eICR_documents2\
                                                WHERE OID = ? and original_OID = ?\
                                                and versionControlNum = ? and location = ?",
                                               (self.document.docID, self.document.origDocID, self.document.vcn, self.location))
                    self.dupDoc = False
                    rows = self.output_cursor.fetchall()
                    for row in rows:
                        self.dupDoc = True
                    if len(rows)==0:
                        if self.document.eventTime != "-1" and self.date_added != "-1" and self.document.encounterTime != "-1": #All kept
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider,\
                                                    date_added, hpi, dischargeDispositionCode, healthCareFacility,\
                                                    serviceProvider, eE, eECode, eventDate, encounterDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID, self.date_added,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID,
                                                     self.spoID, self.document.eE, self.document.eECode.code, self.document.eventTime, self.document.encounterTime, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime == "-1" and self.date_added != "-1" and self.document.encounterTime != "-1": #Keep date_added and encounterTime
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, date_added, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, encounterDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID, self.date_added,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.encounterTime, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime != "-1" and self.date_added == "-1" and self.document.encounterTime != "-1": #Keep eventTime and encounterTime
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, eventDate, encounterDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.eventTime, self.document.encounterTime, self.document.miscNotes))
                            
                            self.output_cursor.commit()
                        elif self.document.eventTime != "-1" and self.date_added != "-1" and self.document.encounterTime == "-1": #Keep eventTime and date_added
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, date_added, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, eventDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID, self.date_added,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.eventTime, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime == "-1" and self.date_added == "-1" and self.document.encounterTime != "-1": #Keep encounterTime
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, encounterDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.encounterTime, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime == "-1" and self.date_added != "-1" and self.document.encounterTime == "-1": #Keep date_added
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, date_added, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID, self.date_added,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime != "-1" and self.date_added == "-1" and self.document.encounterTime == "-1": #Keep eventTime
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, eventDate, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID, self.spoID, self.document.eE, self.document.eECode.code, self.document.eventTime, self.document.miscNotes))
                            self.output_cursor.commit()
                        elif self.document.eventTime == "-1" and self.date_added == "-1" and self.document.encounterTime == "-1": #Keep Nothing
                            self.output_cursor.execute("INSERT INTO eICR_documents2\
                                                    (OID, original_OID, location, versionControlNum, patient, provider, hpi, dischargeDispositionCode, healthCareFacility, serviceProvider, eE, eECode, miscNotes)\
                                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                                                    (self.document.docID, self.document.origDocID, self.location,
                                                     self.document.vcn, self.patientUID, self.provID,
                                                     self.document.hpi, self.document.dischargeDisposition, self.hcfID,
                                                     self.spoID, self.document.eE, self.document.miscNotes))
                            self.output_cursor.commit()
                        else:
                            print("Error with data")
##This is where the problem is these documents don't have docIDs because they are only in zipped files and don't have a time wehre patient information is written to the file                        
                elif self.document.docID is None:
                    print("Missing doc ID")


            self.document.patient.firstNames = []
            self.document.patient.lastNames = []
            self.document.patient.phoneNumbers = []
            self.document.patient.mrn = "-1"
            self.document.patient.race.code = "-1"
            self.document.patient.ethnicity.code = "-1"
            self.document.docID = "-1"
            self.document.origDocID = "-1"
            self.document.provider.phoneNumber = "-1"
            self.provID = None
            self.document.patient.primaryFirstName = "-1"
            self.document.patient.primaryLastName = "-1"
            self.document.patient.language = "-1"
            self.document.patient.dob = "-1"
            self.document.patient.maritalStatus.code = "-1"
            self.document.patient.sex.code = "-1"
            self.document.patient.deceased = "-1"
            self.document.patient.pregnancyStatus = "-1"
            self.document.patient.travelHistory = "-1"
            self.pAddressUID = "-1"
            self.document.vcn = "-1"
            self.addresses = []
            self.document.hpi = '-1'
            self.HPISection = False
            self.miscNotes = False
            self.document.dischargeDisposition = '-1'
            self.document.eE = '-1'
            self.document.eECode.code = '-1'
            self.document.eventTime = '-1'
            self.hcfID = '-1'
            self.spoID = '-1'
            self.patientUID = '-1'
            self.document.encounterTime = '-1'
            self.document.miscNotes = '-1'


        if self.currentData == 'serviceProviderOrganization':

            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.serviceProvider.orgID,
                                                                           self.document.serviceProvider.systemID,
                                                                           self.document.serviceProvider.orgName,
                                                                           self.document.serviceProvider.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.spoID = row[0]

            if len(rows)==0:
                self.output_cursor.execute("INSERT INTO eICR_provider_organizations2\
                                            (root, extension, org_name, telecom, address) Values (?, ?, ?, ?, ?)",
                                           (self.document.serviceProvider.orgID,
                                            self.document.serviceProvider.systemID,
                                            self.document.serviceProvider.orgName,
                                            self.document.serviceProvider.phoneNumber,
                                            self.spoAddressUID))
                self.output_cursor.commit

            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.serviceProvider.orgID,
                                                                           self.document.serviceProvider.systemID,
                                                                           self.document.serviceProvider.orgName,
                                                                           self.document.serviceProvider.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.spoID = row[0]


            self.document.serviceProvider.orgID = '-1'
            self.document.serviceProvider.systemID = '-1'
            self.document.serviceProvider.orgName = '-1'
            self.document.serviceProvider.phoneNumber = '-1'
            self.spoAddressUID = '-1'

        if self.currentData == 'healthCareFacility':

            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.healthCareFacility.orgID,
                                                                           self.document.healthCareFacility.systemID,
                                                                           self.document.healthCareFacility.orgName,
                                                                           self.document.healthCareFacility.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.hcfID = row[0]


            if len(rows)==0:
                self.output_cursor.execute("INSERT INTO eICR_provider_organizations2\
                                            (root, extension, org_name, telecom, address) Values (?, ?, ?, ?, ?)",
                                           (self.document.healthCareFacility.orgID,
                                            self.document.healthCareFacility.systemID,
                                            self.document.healthCareFacility.orgName,
                                            self.document.healthCareFacility.phoneNumber,
                                            self.hcfAddressUID))
                self.output_cursor.commit

            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.healthCareFacility.orgID,
                                                                           self.document.healthCareFacility.systemID,
                                                                           self.document.healthCareFacility.orgName,
                                                                           self.document.healthCareFacility.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.hcfID = row[0]


            self.document.healthCareFacility.orgID = '-1'
            self.document.healthCareFacility.systemID = '-1'
            self.document.healthCareFacility.orgName = '-1'
            self.document.healthCareFacility.phoneNumber = '1'
            self.hcfAddressUID = '-1'
            
        if self.currentData == 'custodian':
            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.provider.orgID,
                                                                           self.document.provider.systemID,
                                                                           self.document.provider.orgName,
                                                                           self.document.provider.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.provID = row[0]


            if len(rows)==0:
                self.output_cursor.execute("INSERT INTO eICR_provider_organizations2\
                                            (root, extension, org_name, telecom, address) Values (?, ?, ?, ?, ?)",
                                           (self.document.provider.orgID,
                                            self.document.provider.systemID,
                                            self.document.provider.orgName,
                                            self.document.provider.phoneNumber,
                                            self.oAddressUID))
                self.output_cursor.commit

            self.output_cursor.execute("SELECT * FROM eICR_provider_organizations2 WHERE root = ?\
                                        and extension = ? and org_name = ?\
                                        and telecom = ?", (self.document.provider.orgID,
                                                                           self.document.provider.systemID,
                                                                           self.document.provider.orgName,
                                                                           self.document.provider.phoneNumber))
            rows = self.output_cursor.fetchall()
            for row in rows:
                self.orgExists = True
                self.provID = row[0]


            self.document.provider.orgID = '-1'
            self.document.provider.systemID = '-1'
            self.document.provider.orgName = '-1'
            self.document.provider.phoneNumber = '-1'
            self.oAddressUID = '-1'
    



        if self.currentData == 'addr':
            
            self.output_cursor.execute("SELECT * FROM eICR_addresses2 WHERE street_address = ? and city = ? and addr_state = ?\
                                        and postal_code = ? and addr_type = ? and county = ?\
                                        and country = ?", (self.document.address.street,
                                                           self.document.address.city,
                                                           self.document.address.state,
                                                           self.document.address.zipCode,
                                                           self.document.address.addressType,
                                                           self.document.address.county,
                                                           self.document.address.country))

            rows = self.output_cursor.fetchall()
            for row in rows:
                self.patientExists = True

                
            if len(rows)==0:
                self.output_cursor.execute("INSERT INTO eICR_addresses2\
                                            (street_address, city, addr_state, postal_code, addr_type, county, country) VALUES (?, ?, ?, ?, ?, ?, ?)",
                                           (self.document.address.street,
                                            self.document.address.city,
                                            self.document.address.state,
                                            self.document.address.zipCode,
                                            self.document.address.addressType,
                                            self.document.address.county,
                                            self.document.address.country))
                self.output_cursor.commit
                
            if self.document.address.addressType == 'r':
                self.output_cursor.execute("SELECT * FROM eICR_addresses2 WHERE street_address = ? and city = ? and addr_state = ?\
                                        and postal_code = ? and addr_type = ? and county = ?\
                                        and country = ?", (self.document.address.street,
                                                           self.document.address.city,
                                                           self.document.address.state,
                                                           self.document.address.zipCode,
                                                           self.document.address.addressType,
                                                           self.document.address.county,
                                                           self.document.address.country))
                rows = self.output_cursor.fetchall()
                for row in rows:
                    self.pAddressUID = row[0]
                    self.addresses.append(self.pAddressUID)

                    
            if self.document.address.addressType == 'o' and self.parentTags[-2] == 'representedCustodianOrganization':
                self.output_cursor.execute("SELECT * FROM eICR_addresses2 WHERE street_address = ? and city = ? and addr_state = ?\
                                        and postal_code = ? and addr_type = ? and county = ?\
                                        and country = ?", (self.document.address.street,
                                                           self.document.address.city,
                                                           self.document.address.state,
                                                           self.document.address.zipCode,
                                                           self.document.address.addressType,
                                                           self.document.address.county,
                                                           self.document.address.country))
                rows = self.output_cursor.fetchall()
                for row in rows:
                    self.oAddressUID = row[0]

            if self.document.address.addressType == 'o' and self.parentTags[-2] == 'healthCareFacility':
                self.output_cursor.execute("SELECT * FROM eICR_addresses2 WHERE street_address = ? and city = ? and addr_state = ?\
                                        and postal_code = ? and addr_type = ? and county = ?\
                                        and country = ?", (self.document.address.street,
                                                           self.document.address.city,
                                                           self.document.address.state,
                                                           self.document.address.zipCode,
                                                           self.document.address.addressType,
                                                           self.document.address.county,
                                                           self.document.address.country))
                rows = self.output_cursor.fetchall()
                for row in rows:
                    self.hcfAddressUID = row[0]

            if self.document.address.addressType == 'o' and self.parentTags[-2] == 'serviceProviderOrganization':
                self.output_cursor.execute("SELECT * FROM eICR_addresses2 WHERE street_address = ? and city = ? and addr_state = ?\
                                        and postal_code = ? and addr_type = ? and county = ?\
                                        and country = ?", (self.document.address.street,
                                                           self.document.address.city,
                                                           self.document.address.state,
                                                           self.document.address.zipCode,
                                                           self.document.address.addressType,
                                                           self.document.address.county,
                                                           self.document.address.country))
                rows = self.output_cursor.fetchall()
                for row in rows:
                    self.spoAddressUID = row[0]

            self.document.address.street = "-1"
            self.document.address.city = "-1"
            self.document.address.state = "-1"
            self.document.address.zipCode = "-1"
            self.document.address.addressType = "-1"
            self.document.address.county = "-1"
            self.document.address.country = "-1"

            

        

        self.parentTags.pop()

    def characters(self, content):

        # Add given and family names to thier respective lists
        if len(self.parentTags)>3 and self.parentTags[-3] == "patient":
            if self.currentData=="given":
                self.document.patient.firstNames.append(content)

            if self.currentData=="family":
                self.document.patient.lastNames.append(content)

        if len(self.parentTags)>3 and self.parentTags[-2] == 'addr':
            if self.parentTags[-3] == 'patientRole':
                self.document.address.addressType = 'r'

                if self.currentData == 'streetAddressLine' and self.document.address.street != "-2":
                    if self.document.address.street == None or self.document.address.street == "-1":
                        self.document.address.street = content
                    else:
                        self.document.address.street = self.document.address.street + ' ' + content
                elif self.currentData == 'streetAddressLine' and self.document.address.street == "-2":
                    self.document.address.street = "-1"
                elif self.currentData == 'city' and self.document.address.city != "-2":
                    self.document.address.city = content
                elif self.currentData == 'city' and self.document.address.city == "-2":
                    self.document.address.city = "-1"
                elif self.currentData == 'state' and self.document.address.state != "-2":
                    self.document.address.state = content
                elif self.currentData == 'state' and self.document.address.state == "-2":
                    self.document.address.state = "-1"
                elif self.currentData == 'postalCode' and self.document.address.zipCode != "-2":
                    self.document.address.zipCode = content
                elif self.currentData == 'postalCode' and self.document.address.zipCode == "-2":
                    self.document.address.zipCode = "-1"
                elif self.currentData == 'county' and self.document.address.county != "-2":
                    self.document.address.county = content
                elif self.currentData == 'county' and self.document.address.county == "-2":
                    self.document.address.county = "-1"
                elif self.currentData == 'country' and self.document.address.country != "-2":
                    self.document.address.country = content
                elif self.currentData == 'country' and self.document.address.country == "-2":
                    self.document.address.country = "-1"
                self.document.patient.address = self.document.address
            else:
                self.document.address.addressType = 'o'
                if self.currentData == 'streetAddressLine':
                    if self.document.address.street == None or self.document.address.street == "-1":
                        self.document.address.street = content
                    else:
                        self.document.address.street = self.document.address.street + ' ' + content
                elif self.currentData == 'city':
                    self.document.address.city = content
                elif self.currentData == 'state':
                    self.document.address.state = content
                elif self.currentData == 'postalCode':
                    self.document.address.zipCode = content
                elif self.currentData == 'county':
                    self.document.address.county = content
                elif self.currentData == 'country':
                    self.document.address.country = content
                self.document.provider.address = self.document.address
        if len(self.parentTags)>2 and self.parentTags[-2] == 'representedCustodianOrganization' and self.parentTags[-1] == 'name':
            self.document.provider.orgName = content

        if len(self.parentTags)>2 and self.parentTags[-3] == 'healthCareFacility' and self.parentTags[-1] == 'name' and self.parentTags[-2] == 'location':
            self.document.healthCareFacility.orgName = content

        if len(self.parentTags)>2 and self.parentTags[-2] == 'serviceProviderOrganization' and self.parentTags[-1] == 'name':
            self.document.serviceProvider.orgName = content

        if len(self.parentTags)>5 and self.parentTags[-5] == 'component' and self.parentTags[-1] == 'title' and content == 'Miscellaneous Notes':
            
            self.miscNotes = True

        if len(self.parentTags)>3 and self.parentTags[-3] == 'encompassingEncounter':
            if self.currentData == 'originalText':
                self.document.eE = content

        if len(self.parentTags)>7 and self.parentTags[-1] == 'content' and self.parentTags[-8] == 'component':


            if len(content) > 0:
                for code in snowmed_preg_codes:
                    if code in content:
                        self.document.patient.pregnancyStatus = 'pregnant'


                for code in loinc_preg_codes:
                    if code in content:
                        self.document.patient.pregnancyStatus = 'pregnant'



                for code in ICD_preg_codes:
                    if code in content:
                        self.document.patient.pregnancyStatus = 'pregnant'



class payloadParser(xml.sax.ContentHandler):
    def __init__(self, output_cursor = None):
        self.parentTags = []
        self.triggerCodeLocation = False
        self.triggerCode = CodedValue()
        self.output_cursor = output_cursor.cursor()
        self.OID = None
        self.triggerCodeRecorded = False

    def startElement(self, tag, attributes):
        self.currentData = tag
        self.parentTags.append(tag)


        if len(self.parentTags)>9:
            if self.parentTags[-2] == 'observation' and (self.parentTags[-10] == 'ClinicalDocument' or self.parentTags[-8] == 'ClinicalDocument' or self.parentTags[-9] == 'ClinicalDocument'):

                if self.currentData == 'code' and 'code' in attributes.getNames() and (attributes['code']=='INV169' or attributes['code']=='64572001' or attributes['code']=='INV168'):
                    self.triggerCodeLocation = True
                    self.myCode = attributes['code']

                if self.currentData == 'value' and self.triggerCodeLocation == True and 'code' in attributes.getNames() and 'codeSystem' in attributes.getNames() and 'codeSystemName' in attributes.getNames() and 'displayName' in attributes.getNames():

                    self.triggerCode.code = attributes['code']
                    self.triggerCode.codeSystem = attributes['codeSystem']
                    self.triggerCode.codeSystemName = attributes['codeSystemName']
                    self.triggerCode.displayName = attributes['displayName']

                    self.triggerCodeLocation = False
                    self.triggerCodeRecorded = True
        if len(self.parentTags)>1:
            if self.parentTags[-2] == 'ClinicalDocument' and self.currentData == 'id' and 'extension' in attributes.getNames():
                self.OID = attributes['extension']

            elif self.parentTags[-2] == 'externalDocument' and self.currentData =='id' and 'root' in attributes.getNames():
                self.OID = attributes['root']

            

    def endElement(self,tag):
        self.currentData = tag

        if len(self.parentTags)>1:
            if self.currentData == 'observation' and self.triggerCodeRecorded == True:

                self.output_cursor.execute("SELECT * FROM eICR_trigger_codes2 WHERE code = ?\
                                            and code_system = ? and code_system_name = ?\
                                            and display_name = ? and OID = ?", (self.triggerCode.code,
                                                                   self.triggerCode.codeSystem,
                                                                   self.triggerCode.codeSystemName,
                                                                   self.triggerCode.displayName,
                                                                   self.OID))
                rows = self.output_cursor.fetchall()
                if len(rows) == 0 and self.triggerCode.code != None:
                    self.output_cursor.execute("INSERT INTO eICR_trigger_codes2\
                        (code, code_system, code_system_name, display_name, OID) VALUES (?, ?, ?, ?, ?)", (self.triggerCode.code,
                                                                           self.triggerCode.codeSystem,
                                                                           self.triggerCode.codeSystemName,
                                                                           self.triggerCode.displayName,
                                                                            self.OID))

                    
                self.triggerCodeRecorded = False
                    
                self.output_cursor.commit()
                self.triggerCode.code = None
                self.triggerCode.codeSystem = None
                self.triggerCode.codeSystemName = None
                self.triggerCode.displayName = None
                self.triggerCodeLocation = False
                
                
        

        self.parentTags.pop()                                     
                

    def characters(self, content):
        pass

        

if (__name__== "__main__"):

    staging_conn = pyodbc.connect(r"")
    prod_conn = pyodbc.connect(r"")
    output_connection = pyodbc.connect(r'')

    zipfold = f"J:\\NEDSS\\Rhapsody\\CloverleafImport_ECR\\4_eICR Zipped Files\\{myDate1}"
    print(zipfold)
    outputloc = "J:\\NEDSS\\Rhapsody\\CloverleafImport_ECR\\4_eICR Zipped Files\\temp\\temp2"

    eICRName = "CDA_eICR.xml"
    RRName = "CDA_RR.xml"


    query  = f"SELECT original_payload, payload, add_time FROM dbo.nbs_interface WITH (NOLOCK) where add_time >= '{myDate2}' and add_time <= '{myDate3}' and original_payload is not NULL and record_status_cd = 'SUCCESS'"

    #Create Cursors
    staging_cursor = staging_conn.cursor()
    prod_cursor = prod_conn.cursor()

    # Run Queries
    staging_cursor.execute(query)
    prod_cursor.execute(query)

    xml_out_filepath = "J:/SSI/_Nathan/temp_Data/"

    #####################################################################
    # Zipped File Parsing
    #####################################################################
    
    zipStart = time.time()
    print("\nStarting Zipped Parsing\n")
    uf.set_wdir(f"J:\\NEDSS\\Rhapsody\\CloverleafImport_ECR\\4_eICR Zipped Files\\{myDate1}\\")
    cwd = os.getcwd()

    processedFilesQuery = "SELECT original_OID FROM eICR_documents2 with (NOLOCK)"
    output_cursor = output_connection.cursor()
    output_cursor.execute(processedFilesQuery)


    processedFiles = []
    
    for row in output_cursor:
        processedFiles.append(row[0])
    

    for root, dirs, files in os.walk(cwd, topdown=False):

        if root == zipfold:
            for file in files:
                filePath = os.path.join(zipfold, file)

                if filePath[-4:] == ".zip" and file[0:-4] not in processedFiles:
                
                    with zipfile.ZipFile(filePath, 'r') as zip_ref:
                        zip_ref.extractall(outputloc)
                
                    eICRLoc = os.path.join(outputloc, eICRName)
                    rrLoc = os.path.join(outputloc, RRName)
                    updateTime = datetime.datetime.fromtimestamp(os.path.getmtime(filePath))

                    
                    myEICRHandler = EICRHandler(output_connection, 'zipFiles', updateTime)
                    myPayloadHandler = payloadParser(output_connection)

                    eICRParser = xml.sax.make_parser()
                    eICRParser.setFeature(xml.sax.handler.feature_namespaces, 0)
                    eICRParser.setContentHandler(myEICRHandler)

                    rrParser = xml.sax.make_parser()
                    rrParser.setFeature(xml.sax.handler.feature_namespaces, 0)
                    rrParser.setContentHandler(myPayloadHandler)

                    nowTime = datetime.datetime.now()

                    dateDelta = nowTime - updateTime 

                    try:
                        eICRParser.parse(eICRLoc)
                    except Exception as e:
                        print(f"Parser failed to handle eICR for {file}\n Error: {e}")
                    try:
                        rrParser.parse(rrLoc)
                    except Exception as e:
                        print(f"Parser faild to handle RR for {file}\n Error: {e}")

                else:
                    print("Not a zip file")
    
    zipEnd = time.time()
    zipTime = zipEnd-zipStart
    print(f"Time to complete Zip parsing: {zipTime/60}")
    

    
    ######################################################################
    # Staging Parsing
    ######################################################################
    print("\nStarting Staging Parsing\n")
    stageStart = time.time()
    sc = 0

    for row in staging_cursor:
        #print(row)
        date_added = row[2]

        myEICRHandler = EICRHandler(output_connection, "staging", date_added)
        myPayloadHandler = payloadParser(output_connection)

        original_payload = row[0]
        payload = row[1]

        if original_payload == None:
            print("STAGING: Original Payload is None")
        else:
            xmlFile = str(original_payload)
            xmlFile = xmlFile.replace('\n',' ')
            xmlFile = xmlFile.replace('\\n',' ')
            xmlFile = xmlFile.replace("(","")
            xmlFile = xmlFile.replace(")","")
            xmlFile = xmlFile.replace("',", "'")
            xmlFile = xmlFile.replace("\\'", "")
            xmlFile = xmlFile.replace("<br\\>","")
            xmlFile = xmlFile.replace("<br/>","")
            xmlFile = xmlFile.replace("'", "")
            xmlFile = xmlFile.replace("<!--", "")
            xmlFile = xmlFile.replace("-->", "")
            for i in range(11):
                xmlFile = xmlFile.replace("  ", " ")
            xmlFile = xmlFile.replace("<td/>", "")
            '''
            xml_out_row_path = f"{xml_out_filepath}staging_original_{sc}.xml"
            with open(xml_out_row_path, 'w') as currentFile:
                currentFile.write(xmlFile)
            '''
            xml.sax.parseString(xmlFile, myEICRHandler)

        if payload == None:
            print("STAGING: Payload is None.")
        else:
            xmlFile = str(payload)
            xmlFile = xmlFile.replace('\n',' ')
            xmlFile = xmlFile.replace('\\n',' ')
            xmlFile = xmlFile.replace("(","")
            xmlFile = xmlFile.replace(")","")
            xmlFile = xmlFile.replace("',", "'")
            xmlFile = xmlFile.replace("\\'", "")
            xmlFile = xmlFile.replace("<br\\>","")
            xmlFile = xmlFile.replace("<br/>","")
            xmlFile = xmlFile.replace("'", "")
            xmlFile = xmlFile.replace("<!--", "")
            xmlFile = xmlFile.replace("-->", "")
            for i in range(11):
                xmlFile = xmlFile.replace("  ", " ")
            xmlFile = xmlFile.replace("<td/>", "")

            xml.sax.parseString(xmlFile, myPayloadHandler)

        sc+=1

    stageEnd = time.time()
    stageTime = stageEnd-stageStart
    print(f"Time to complete Staging Parsing: {stageTime/60}")
    ######################################################################
    # Prod Parsing
    ######################################################################

    print("\nStarting Prod Parsing\n")
    pc = 0
    prodStart = time.time()


    for row in prod_cursor:

        date_added = row[2]

        myEICRHandler = EICRHandler(output_connection, "prod", date_added)
        myPayloadHandler = payloadParser(output_connection)
    
        original_payload = row[0]
        payload = row[1]

        if original_payload == None:
            print(f"PROD: Original Payload None.")
        else:
            xmlFile = str(original_payload)
            xmlFile = xmlFile.replace('\n',' ')
            xmlFile = xmlFile.replace('\\n',' ')
            xmlFile = xmlFile.replace("(","")
            xmlFile = xmlFile.replace(")","")
            xmlFile = xmlFile.replace("',", "'")
            xmlFile = xmlFile.replace("\\'", "")
            xmlFile = xmlFile.replace("<br\\>","")
            xmlFile = xmlFile.replace("<br/>","")
            xmlFile = xmlFile.replace("'", "")
            xmlFile = xmlFile.replace("<!--", "")
            xmlFile = xmlFile.replace("-->", "")        
            for i in range(11):
                xmlFile = xmlFile.replace("  ", " ")
            xmlFile = xmlFile.replace("<td/>", "")

            
            xml.sax.parseString(xmlFile, myEICRHandler)


        if payload == None:
            print(f"PROD: Payload is None.")
        else:
            xmlFile = str(payload)
            xmlFile = xmlFile.replace('\n',' ')
            xmlFile = xmlFile.replace('\\n',' ')
            xmlFile = xmlFile.replace("(","")
            xmlFile = xmlFile.replace(")","")
            xmlFile = xmlFile.replace("',", "'")
            xmlFile = xmlFile.replace("\\'", "")
            xmlFile = xmlFile.replace("<br\\>","")
            xmlFile = xmlFile.replace("<br/>","")
            xmlFile = xmlFile.replace("'", "")
            xmlFile = xmlFile.replace("<!--", "")
            xmlFile = xmlFile.replace("-->", "")
            for i in range(11):
                xmlFile = xmlFile.replace("  ", " ")
            xmlFile = xmlFile.replace("<td/>", "")

            xml.sax.parseString(xmlFile, myPayloadHandler)
            
        pc+=1

    prodEnd = time.time()
    prodTime = prodEnd-prodStart
    print(f"Time to complete prod parsing: {prodTime/60}")
    
    staging_cursor.close()
    prod_cursor.close()
    staging_conn.close()
    prod_conn.close()
    output_connection.close()
    print("FINISHED Parsing")

    dbStart = time.time()
    sandbox_conn = pyodbc.connect(r'')
   
    agg_results_query = "INSERT INTO eIcR_aggStepper\
                                        SELECT DISTINCT doc.OID,\
                                        doc.original_OID,\
                                        doc.versionControlNum,\
                                        doc.location,\
                                        pat.mrn,\
                                        pat.given_name,\
                                        pat.family_name,\
                                        pat.address AS patAddr,\
                                        addr.addr_state,\
                                        addr.postal_code,\
                                        pat.telecom as pat_telecom,\
                                        gc.display_name AS gender_display,\
                                        pat.pat_language,\
                                        case\
                                            when pat.dob = '-1' then NULL\
                                            else pat.dob end as dob,\
                                        rc.display_name AS race_display,\
                                        ec.display_name AS ethnicity_display,\
                                        prov.org_name,\
                                        mc.display_name AS marital_display,\
                                        pat.pregnancy_status,\
                                        pat.travel_history,\
                                        pat.deceased,\
                                        prov.root,\
                                        prov.extension,\
                                        doc.OID as raw_OID,\
                                        doc.original_OID as orig_oid_raw,\
                                        doc.date_added,\
                                        pat.address AS patAddr_ID,\
                                        prov_addr.addr_state as prov_state,\
                                        doc.hpi,\
                                        doc.dischargeDispositionCode,\
                                        hcf.org_name as health_care_facility,\
                                        spo.org_name as service_provider_organization,\
                                        case \
                                            when Try_convert(date, pat.dob) is NULL then '-1' \
                                            else datediff(YEAR, pat.dob, doc.date_added) end as age,\
                                        doc.eE as eEncounter,\
                                        doc.eECode as eEncounter_code,\
                                        ee.display_name as eEncounter_display,\
                                        doc.eventDate,\
                                        hcf.extension as health_care_facility2,\
                                        tc.code as triggerCode,\
                                        tc.display_name as triggerName,\
                                        doc.encounterDate,\
                                        tc2.display_name as triggerName2,\
                                        tc2.code as triggerCode2,\
                                        prov.address as provider_address_id\
                                        FROM \
                                                eICR_documents2 AS doc inner JOIN eICR_patients2 AS pat ON (doc.patient = pat.UID) or (doc.oid = pat.oid)\
                                                LEFT JOIN eICR_addresses2 AS addr ON pat.address = addr.uid \
                                                LEFT JOIN eICR_gender_codes AS gc ON pat.gender = gc.code \
                                                LEFT JOIN eICR_race_ethnicity_codes AS rc ON pat.race = rc.code \
                                                LEFT JOIN eICR_race_ethnicity_codes AS ec ON pat.ethnicity = ec.code \
                                                LEFT JOIN eICR_provider_organizations2 AS prov ON pat.provider = prov.uid \
                                                LEFT JOIN eICR_provider_organizations2 AS hcf ON doc.healthCareFacility = hcf.uid \
                                                LEFT JOIN eICR_provider_organizations2 AS spo ON doc.serviceProvider = spo.uid \
                                                LEFT JOIN eICR_addresses2 AS prov_addr ON prov.address = prov_addr.uid \
                                                LEFT JOIN eICR_marriage_codes AS mc ON pat.marital_status = mc.code \
                                                LEFT JOIN eICR_trigger_codes2 AS tc ON doc.OID=tc.OID\
                                                LEFT JOIN eICR_trigger_codes2 as tc2 ON doc.original_OID = tc2.OID\
                                                LEFT JOIN eICR_encompassing_encounter_codes as ee ON doc.eECode=ee.code\
                                        WHERE Not EXISTS (\
                                        SELECT 1\
                                        FROM eICR_aggStepper fr\
                                        WHERE fr.raw_oid = doc.oid\
                                        and fr.orig_oid_raw = doc.original_OID\
                                        and fr.versionControlNum = doc.versionControlNum\
                                        )"

    final_results_query = "INSERT INTO eIcR_FinalResults2\
                                        SELECT DISTINCT OID,\
                                        original_OID,\
                                        versionControlNum,\
                                        location,\
                                        mrn,\
                                        given_name,\
                                        family_name,\
                                        patAddr,\
                                        addr_state,\
                                        postal_code,\
                                        pat_telecom,\
                                        gender_display,\
                                        pat_language,\
                                        dob,\
                                        race_display,\
                                        ethnicity_display,\
                                        org_name,\
                                        marital_display,\
                                        pregnancy_status,\
                                        travel_history,\
                                        deceased,\
                                        root,\
                                        extension,\
                                        raw_OID,\
                                        orig_oid_raw,\
                                        date_added,\
                                        patAddr_ID,\
                                        prov_state,\
                                        hpi,\
                                        dischargeDispositionCode,\
                                        health_care_facility,\
                                        service_provider_organization,\
                                        age,\
                                        eEncounter,\
                                        eEncounter_code,\
                                        eEncounter_display,\
                                        eventDate,\
                                        health_care_facility2,\
                                        encounterDate,\
                                        CASE\
                                            WHEN triggerName is NULL then triggerName2\
                                            else triggerName\
                                        END as triggerNameComb,\
                                        CASE\
                                            WHEN triggerCode is Null then triggerCode2\
                                            ELSE triggerCode\
                                            END as triggerCodeComb,\
                                        provider_address_id\
                                        FROM \
                                            eICR_aggStepper"
    

    missingDataQuery = "INSERT INTO eICR_Missing_Data_Summary2\
                        SELECT DISTINCT\
                            CASE\
                                WHEN OID = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as [OID],\
                            CASE \
                                WHEN original_OID = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as original_OID,\
                            versionControlNum as vcn,\
                            [location] as server_name,\
                            CASE\
                                WHEN mrn = '-1' THEN 'Missing'\
                                WHEN mrn = 'Original_Global_Unique_ID' THEN 'Incorrect Value'\
                                ELSE 'Present'\
                            END as mrn,\
                            CASE\
                                WHEN given_name = '-1' THEN 'Missing'\
                                WHEN given_name is NULL then 'Missing'\
                                ELSE 'Present'\
                            END as given_name,\
                            CASE\
                                WHEN family_name = '-1' THEN 'Missing'\
                                WHEN family_name is NULL then 'Missing'\
                                ELSE 'Present'\
                            END as family_name,\
                            CASE\
                                WHEN patAddr = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as patient_address,\
                            addr_state as patient_state,\
                            postal_code as patient_zip,\
                            CASE\
                                WHEN pat_telecom = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as patient_phone,\
                            gender_display as gender,\
                            pat_language as patient_language,\
                            CASE\
                                WHEN dob = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as dob,\
                            race_display as race,\
                            ethnicity_display as ethnicity,\
                            org_name,\
                            marital_display as marital_status,\
                            CASE\
                                WHEN pregnancy_status = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as pregnancy_status,\
                            CASE\
                                WHEN travel_history = '-1' THEN 'Missing'\
                                ELSE 'Present'\
                            END as travel_hitsory,\
                            deceased,\
                            [root] as provider_root,\
                            extension as provider_extension,\
                            raw_OID,\
                            orig_oid_raw,\
                            date_added,\
                            pataddr_ID as patient_address_id,\
                            cast(prov_state as varchar(50)) as provider_state,\
                            CASE \
                                WHEN hpi = '-1' THEN 'Missing'\
                                ELSE hpi\
                            END as hpi,\
                            dischargeDispositionCode,\
                            health_care_facility,\
                            service_provider_organization,\
                            age,\
                            eEncounter,\
                            eEncounter_code,\
                            eEncounter_display,\
                            eventDate,\
                            health_care_facility2,\
                            encounterDate,\
                            triggerNameComb,\
                            triggerCodeComb,\
                            provider_address_id\
                        FROM eICR_FinalResults2 WITH (NOLOCK)"


 
    sandboxCursor = sandbox_conn.cursor()
    print("Running Aggregate Results")
    sandboxCursor.execute(agg_results_query)
    
    sandboxCursor.commit()
    sandboxCursor.execute("DELETE FROM eICR_FinalResults2")
    sandboxCursor.commit()
    sandboxCursor.execute("DELETE FROM eICR_Missing_Data_Summary2")
    sandboxCursor.commit()
    print("Running Final Results")
    sandboxCursor.execute(final_results_query)
    sandboxCursor.commit()
    print("Running Missing Data Summary")
    sandboxCursor.execute(missingDataQuery)
    sandboxCursor.commit()
    sandboxCursor.close()
    sandbox_conn.close()
    dbEnd = time.time()
    dbTime = dbEnd - dbStart
    print(f"Time to put data into db: {dbTime/60}")


    print("End of Program")
    terminate = input("Is the program complete?")
    
    
